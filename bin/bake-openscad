#!/usr/bin/env python3
import sys
import tempfile
import os
import shutil
import shlex
import re
import subprocess as sp
from collections import namedtuple
import xmltodict
import zipfile
import hashlib
sys.path.append(
  os.path.join(
    os.path.dirname(os.path.realpath(__file__)),
    "..",
    "py"
  )
)
from openscadutil import csg
from openscadutil.info import InfoProcessor
repository_root=os.path.join(
  os.path.dirname(os.path.realpath(__file__)),
  "..",)

visicut_mapping_file=os.path.join(repository_root,"resources","visicut-mapping.xml")
visicut_transform_file=os.path.join(repository_root,"resources","visicut-transform.xml")

visicut_scale=1 #3.5409142873233015

fnInputFile=None
fOpenResult=False
options={
  "output_dir": ".",
  "short_filenames": "0"
}
filterParts=set()

def print_help(f):
  f.write(
    "bake-openscad [options] file [part*] \n"
    "  compiles a multi-part color-coded openscad file into a vector graphic\n"
    "  format ready for use in 3d / 2d fabrication tools."
    "options:\n"
    "  -h|--help\n"
    "    print this help text and exit normally\n"
    "  --open\n"
    "    if the compiled part(s) have an attached process, the corresponding \n"
    "    program is opened after compilation.\n"
    "  --output-dir <path>\n"
    "    specify a default output directory. this can still be overridden by \n"
    "    scad files.\n"
    )
  f.flush()

class clex(Exception): pass
try:
  s=None
  for arg in sys.argv[1:]:
    if s is None:
      if arg in {"-h","--help"}:
        print_help(sys.stdout)
        sys.exit(0)
      elif arg in {"--open"}:
        fOpenResult=True
      elif arg in {"--output-dir"}: 
        s=arg

      elif fnInputFile is None:
        if not os.path.exists(arg):
          raise clex("input file '%s' does not exist"%arg)
        fnInputFile=arg
      else:
        filterParts.add(arg)
    elif s=="--output-dir":
      options["output_dir"]=arg
      s=None
  if fnInputFile is None:
    raise clex("no input file specified")
except clex as e:
  print_help(sys.stderr)
  sys.stderr.write("\x1b[31;1mError\x1b[30;0m: %s\n"%e)
  sys.exit(1)

stage=None
stage_state=None
fStage=sys.stderr
INIT="[ \x1b[30;1mINIT\x1b[30;0m ]"
RUN ="[ \x1b[36;1mRUN\x1b[30;0m  ]"
WARN="[ \x1b[33;1mWARN\x1b[30;0m ]"
FAIL="[ \x1b[31;1mFAIL\x1b[30;0m ]"
DONE="[ \x1b[32;1mDONE\x1b[30;0m ]"

expr_csg_color=re.compile(
  r"\W*color\(\[([0-9.]+),\W*([0-9.]+),\W*([0-9.]+),\W*([0-9.]+)\]\)\W*\{\W*")
expr_csg_3delement=re.compile(
  r"\W*(linear_extrude|cube|cylinder|sphere|polyhedron|import)\W*\(.*"
)
expr_csg_2delement=re.compile(
  r"\W*(square|circle|polygon|text|import_dxf)\W*\(.*"
)
expr_echo_part=re.compile("^ECHO: \"bake-part:(.*)\"$")
expr_echo_engrave=re.compile("^ECHO: \"bake-engrave:(.*)\"$")
expr_echo_mark=re.compile("^ECHO: \"bake-mark:(.*)\"$")
expr_echo_cut=re.compile("^ECHO: \"bake-cut\"$")
expr_echo_option=re.compile("^ECHO: \"bake-option ([a-zA-Z_][a-zA-Z_0-9]*):(.*)\"$")
part_t=namedtuple(
  "part_t",
  "ident engrave_depths mark_depths cut three_dimensional empty checksum")

svg_component_t=namedtuple(
  "svg_component_t","fn color use_stroke use_fill group_label")

def setStage(ident=None,state=INIT,brk=False):
  global stage, stage_state
  if ident is None: ident=stage
  if state is None : state=stage_state
  if stage is not None and ident!=stage: fStage.write("\n")
  fStage.write("\r%s %s\x1b[0K"%(state,ident))
  if brk: fStage.write("\n")
  stage=ident
  stage_state=state

def try_call(cmdline,critical=True):
  p=sp.Popen(cmdline,shell=True,stdout=sp.PIPE,stderr=sp.PIPE)
  (sout,serr)=p.communicate()
  
  if p.returncode!=0:
    setStage(state=FAIL,brk=True)
    if critical:
      sys.stderr.write(serr.decode())
      sys.exit(1)
  else:
    setStage(state=DONE)
  return sout,serr,p.returncode

def file_checksum(fn):
  sha=hashlib.sha1()
  with open(fn,"rb") as f:
    sha.update(f.read())
  return sha.hexdigest()


fnTempDir=tempfile.mkdtemp()
fnCSG=os.path.join(fnTempDir,"input.csg")
fnBase=os.path.splitext(fnInputFile)[0]
fnLog="%s.bakelog"%fnInputFile

def extract_part(ident):
  engrave_depths=set()
  mark_depths=set()
  has_cut_planes=False
  two_dimensional=False
  three_dimensional=False

  setStage("extracting part info for '%s'"%ident,RUN)
  sout,serr,retcode=try_call(
    "openscad %s -D \"\\$laser_part=undef\" -D \"\\$part=\\\"%s\\\"\" -D \"\\$bake_discover=true\" -o %s --render"
    %(
      shlex.quote(fnInputFile),
      ident,
      shlex.quote(fnCSG)))
  
  for ln in serr.decode().split("\n"):
    ln=ln.strip()
    m=expr_echo_engrave.match(ln)
    if m:
      engrave_depths.add(m.groups()[0])
    m=expr_echo_mark.match(ln)
    if m:
      mark_depths.add(m.groups()[0])
    m=expr_echo_cut.match(ln)
    if m:
      has_cut_planes=True

  setStage(state=DONE,brk=True)
  sha=hashlib.sha1()
  with open(fnCSG,"r") as f:
    raw=f.read()
    sha.update(raw.encode())
    ast=csg.parse(raw)
    proc=InfoProcessor()
    csg.traverse(ast,proc)
    three_dimensional=proc.three_dimensional
    two_dimensional=not three_dimensional
  
  if len(engrave_depths)>0:
    sys.stderr.write("engraving:\n")
    for depth in sorted(engrave_depths):
      sys.stderr.write("  %s\n"%depth)
  if len(mark_depths)>0:
    sys.stderr.write("marking:\n")
    for depth in sorted(mark_depths):
      sys.stderr.write("  %s\n"%depth)
  if has_cut_planes==True:
    sys.stderr.write("cutting: true\n")
  
  if not (three_dimensional or two_dimensional):
    sys.stderr.write("empty")
  elif three_dimensional==True:
    sys.stderr.write("dimensions: 3")
  else:
    sys.stderr.write("dimensions: 2")
  
  return part_t(
    ident,engrave_depths,mark_depths,has_cut_planes,three_dimensional,
    not (three_dimensional or two_dimensional),
    sha.hexdigest())
  
try:

  partnames={"none"}
  partkv=dict()
  parts=dict()
  completed_part_t=namedtuple(
    "completed_part_t","filename file_checksum csg_checksum")
  completed_parts=dict()

  setStage("loading metadata",RUN)
  if os.path.exists(fnLog):
    with open(fnLog,"r") as f:
      for ln in f:
        cmdline=shlex.split(ln,comments=True)
        if len(cmdline)<1: continue
        if cmdline[0]=="part":
          if len(cmdline)<5: continue
          part=completed_part_t(*cmdline[2:5])
          if not os.path.exists(part.filename): continue
          if file_checksum(part.filename)!=part.file_checksum: continue
          completed_parts[(cmdline[1],".")]=part
        elif cmdline[0]=="part-in-dir":
          if len(cmdline)<6: continue
          part=completed_part_t(*cmdline[3:6])
          if not os.path.exists(part.filename): continue
          if file_checksum(part.filename)!=part.file_checksum: continue
          completed_parts[(cmdline[1],cmdline[2])]=part


  setStage("extracting CSG",RUN)
  sout,serr,retcode=try_call(
    "openscad %s -D \"\\$laser_part=undef\" -D \"\\$part=undef\" -D \"\\$bake_discover=true\" -o %s --render"
    %(
      shlex.quote(fnInputFile),
      shlex.quote(fnCSG)))
  
  setStage("extracting composition parameters")
  for ln in serr.decode().split("\n"):
    ln=ln.strip()
    m=expr_echo_part.match(ln)
    if m:
      desc=m.groups()[0].split(";")
      ident=desc[0]
      partkv[ident]=dict()
      for item in desc[1:]:
        k,v=item.split(":",1)
        partkv[ident][k]=v
      if not "ignore" in partkv[ident]:
        partnames.add(ident)
      continue
    m=expr_echo_option.match(ln)
    if m:
      k,v=m.groups()[0:2]
      options[k]=v

  setStage(state=DONE,brk=True)
  for ident in sorted(partnames):
    parts[ident]=extract_part(ident)

  if not os.path.exists(options["output_dir"]):
    os.makedirs(options["output_dir"])

  for part in parts.values():
    if len(filterParts)>0 and not part.ident in filterParts:
      continue
    svg_components=[]
    svg_paths=[]
    part_key=(part.ident,options["output_dir"])
    if part_key in completed_parts:
      if part.checksum==completed_parts[part_key].csg_checksum:
        continue
    fn_part=None
    if options["short_filenames"]=="1":
      fb_part=part.ident
    else:
      fb_part="%s-part-%s"%(fnBase,part.ident)
    for depth in part.engrave_depths:
      fn=os.path.join(fnTempDir,"part-%s-engrave-%s.svg"%(part.ident,depth))
      setStage("generating %s engrave depth %s"%(part.ident,depth))
      try_call(
        "openscad %s "
        "-D \"\\$laser_part=\\\"engrave\\\"\" "
        "-D \"\\$part=\\\"%s\\\"\" "
        "-D \"\\$engrave_depth=%s\" "
        "-o %s --render"
        %(
          shlex.quote(fnInputFile),
          part.ident,
          depth,
          shlex.quote(fn)))
      svg_components.append(
        svg_component_t(
          fn,
          ("%.2x"%(255-min(255,max(0,int(255*float(depth))))))*3,
          False,True,"engrave"))
    for depth in part.mark_depths:
      fn=os.path.join(fnTempDir,"part-%s-mark-%s.svg"%(part.ident,depth))
      setStage("generating %s mark depth %s"%(part.ident,depth))
      try_call(
        "openscad %s "
        "-D \"\\$laser_part=\\\"mark\\\"\" "
        "-D \"\\$part=\\\"%s\\\"\" "
        "-D \"\\$mark_depth=%s\" "
        "-o %s --render"
        %(
          shlex.quote(fnInputFile),
          part.ident,
          depth,
          shlex.quote(fn)))
      svg_components.append(
        svg_component_t(
          fn,
          ("%.2x"%(255-min(255,max(0,int(255*float(depth))))))*3,
          False,True, "mark"))
    if part.cut:
      fn=os.path.join(fnTempDir,"part-%s-cut.svg"%(part.ident))
      setStage("generating %s cut layer"%(part.ident))
      try_call(
        "openscad %s "
        "-D \"\\$laser_part=\\\"cut\\\"\" "
        "-D \"\\$part=\\\"%s\\\"\" "
        "-o %s --render"
        %(
          shlex.quote(fnInputFile),
          part.ident,
          shlex.quote(fn)))
      svg_components.append(svg_component_t(fn,"ff0000",False,True,"cut"))

    if (
      not part.empty and
      len(part.engrave_depths)<1 and len(part.mark_depths)<1 and not part.cut):
      if part.three_dimensional:
        fn_part=os.path.join(options["output_dir"],"%s.stl"%(fb_part))
        setStage("generating %s 3d mesh"%part.ident)
      else:
        fn_part=os.path.join(options["output_dir"],"%s.svg"%(fb_part))
        setStage("generating %s 2d figure"%(part.ident))

      sout,serr,retcode=try_call(
        "openscad %s "
        "-D \"\\$part=\\\"%s\\\"\" "
        "-o %s --render "
        %(
          shlex.quote(fnInputFile),
          part.ident,
          shlex.quote(fn_part)), critical=False)
      if retcode!=0:
        continue

    def conv_dimension(dim):
      if dim.endswith("mm"):
        return float(dim[:-2])
      return float(dim)
    if len(svg_components)>0:
      setStage("uniting %s layers"%(part.ident))
      path_groups=[]
      svg_width=0
      svg_height=0
      for comp in svg_components:
        with open(comp.fn,"r") as f:
          xml=xmltodict.parse(f.read())
          svg=xml["svg"]
        
        if not "path" in svg: continue
        svg_width=max(svg_width,conv_dimension(svg["@width"]))
        svg_height=max(svg_height,conv_dimension(svg["@height"]))

        if type(svg["path"])==list: mypaths=paths
        else: mypaths=[svg["path"]]
        for path in mypaths:
          del path["@stroke"]
          del path["@fill"]
          del path["@stroke-width"]
          if comp.use_fill: 
            path["@fill"]="#%s"%comp.color
          if comp.use_stroke:
            path["@stroke-width"]="0.1mm"
            path["@stroke"]="#%s"%comp.color
        mygroup={ "@inkscape:label":comp.group_label, "path":mypaths}
        path_groups.append(mygroup)
      
      svg_width*=visicut_scale
      svg_height*=visicut_scale
      del svg["path"];
      svg["g"]={ "@transform": "scale(%s)"%visicut_scale, "g": path_groups}
      svg["@width"]=str(svg_width)
      svg["@height"]=str(svg_height)
      svg["@xmlns:inkscape"]="http://www.inkscape.org/namespaces/inkscape"
      fn_svg=os.path.join(options["output_dir"],"%s.svg"%(fb_part))
      with open(fn_svg,"w") as f:
        f.write(xmltodict.unparse(xml))
      setStage(state=DONE)
      fn_part=fn_svg
    elif not part.three_dimensional and fn_part is not None:
      with open(fn_part,"r") as f:
        xml=xmltodict.parse(f.read())
        svg=xml["svg"]
      svg_width=conv_dimension(svg["@width"])
      svg_height=conv_dimension(svg["@height"])
      fn_svg=fn_part
      

    if part.ident in partkv and "process" in partkv[part.ident]:
      process=partkv[part.ident]["process"]
      if process=="visicut":
        if part.three_dimensional and len(svg_components)<1:
          setStage("no 2d components for visicut process in %s"%part.ident,FAIL)
          continue
        setStage("processing visicut for %s"%part.ident,RUN)
        fn_mapping=os.path.join(fnTempDir,"mappings.xml")
        fn_transform=os.path.join(fnTempDir,"transform.xml")
        fn_plf=os.path.join(options["output_dir"],"%s.plf"%(fb_part))
        fn_part=fn_plf
        shutil.copy(visicut_mapping_file,fn_mapping)

        with open(visicut_transform_file,"r") as f:
          transform_template=f.read()
        
        with open(fn_transform,"w") as f:
          f.write(transform_template.format(
            offsetY=svg_height
          ))
        
        zip=zipfile.ZipFile(fn_plf,"w")
        zip.write(fn_mapping,"mappings.xml")
        zip.write(fn_transform,"transform.xml")
        zip.write(fn_svg,os.path.basename(fn_svg))
        zip.close()
        if fOpenResult:
          os.system("visicut %s &"%shlex.quote(fn_plf))
      elif process=="finger-faces":
        if not part.three_dimensional:
          setStage("no 3d components for finger-faces process in %s"%part.ident,FAIL)
          continue

        fn_stl=fn_part
        fn_scad=os.path.join(options["output_dir"],"%s-faces.scad"%fb_part)
        try_call(
          "finger-faces %s "
          "-o %s "
          %(
            shlex.quote(fn_stl),
            shlex.quote(fn_scad)
            ))
        print(">>>>>>>>>>>>>>>>>>>")
        try_call(
          "bake-openscad %s "
          %(
            shlex.quote(fn_scad)
          )
        )
        print("<<<<<<<<<<<<<<<<<<<")

        
    setStage(state=DONE)
      
    if fn_part is not None:
      completed_parts[part_key]=completed_part_t(fn_part,file_checksum(fn_part),part.checksum)
    
          




finally:
          
  with open(fnLog,"w") as f:
    for k,v in sorted(completed_parts.items()):
      f.write("part-in-dir %s %s %s %s %s\n"
        %(
          shlex.quote(k[0]),
          shlex.quote(k[1]),
          shlex.quote(v.filename),
          shlex.quote(v.file_checksum),
          shlex.quote(v.csg_checksum)
        ))

  
  shutil.rmtree(fnTempDir)
  setStage(ident="done",state=DONE,brk=True)